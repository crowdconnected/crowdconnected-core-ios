// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name CrowdConnectedCore
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import BackgroundTasks
import SystemConfiguration.CaptiveNetwork
import CommonCrypto
import CoreBluetooth
import CoreLocation
@_exported import CrowdConnectedCore
import CrowdConnectedShared
import Foundation
import SQLite3
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class CrowdConnected : ObjectiveC.NSObject {
  @objc weak public var delegate: (any CrowdConnectedCore.CrowdConnectedDelegate)?
  @objc public static let shared: CrowdConnectedCore.CrowdConnected
  @objc public var deviceID: CrowdConnectedCore.DeviceID?
  @objc public static func getVersion() -> Swift.String
  @objc public func start(credentials: CrowdConnectedCore.SDKCredentials, trackingMode: CrowdConnectedCore.LocationTrackingMode, completion: @escaping (CrowdConnectedCore.DeviceID?, CrowdConnectedCore.CrowdConnectedValidationResult) -> Swift.Void)
  @objc public func stop()
  @objc public func setAlias(key: Swift.String, value: Swift.String)
  @available(iOS 13.0, *)
  @objc public func activateSDKBackgroundRefresh()
  @available(iOS 13.0, *)
  @objc public func scheduleRefresh()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class PixelCoordinates : ObjectiveC.NSObject {
  @objc public var xPixels: Swift.Double
  @objc public var yPixels: Swift.Double
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class Location : ObjectiveC.NSObject {
  @objc public var xMeters: Swift.Double
  @objc public var yMeters: Swift.Double
  @objc public var latitude: Swift.Double
  @objc public var longitude: Swift.Double
  @objc public var pixelCoordinates: CrowdConnectedCore.PixelCoordinates?
  @objc public var floor: Swift.Int
  @objc public var surfaceID: Swift.String
  @objc public var timestamp: Swift.Int64
  @objc public var type: Swift.String
  @objc public var quality: Swift.Int
  @objc public var maxRSSI: Swift.Double
  @objc public var beaconXForMaxRSSI: Swift.Double
  @objc public var beaconYForMaxRSSI: Swift.Double
  @objc public var surfaceIDForMaxRSSI: Swift.String
  @objc public var observedSurfaces: Swift.Int
  @objc deinit
}
@objc public enum LocationTrackingMode : Swift.Int {
  case foregroundOnly = 0
  case foregroundAndBackground = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class SDKCredentials : ObjectiveC.NSObject {
  @objc public init(appKey: Swift.String, token: Swift.String, secret: Swift.String)
  @objc deinit
}
public typealias DeviceID = Swift.String
@objc public enum CrowdConnectedValidationResult : Swift.Int {
  case success = 0
  case alreadyRunning = 1
  case missingAppKey = 2
  case missingToken = 3
  case missingSecret = 4
  case deviceRegistrationFailed = 5
  case noModulesAreActive = 6
  case missingBluetoothPermissionItem = 7
  case missingWhileInUseLocationPermissionItem = 8
  case missingAlwaysLocationPermissionItem = 9
  case missingLocationBackgroundModeItem = 10
  case missingBluetoothBackgroundModeItem = 11
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension CrowdConnectedCore.CrowdConnectedValidationResult : Foundation.LocalizedError {
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
@objc public protocol CrowdConnectedDelegate {
  @objc func didUpdateLocation(_ locations: [CrowdConnectedCore.Location])
}
extension CrowdConnectedCore.LocationTrackingMode : Swift.Equatable {}
extension CrowdConnectedCore.LocationTrackingMode : Swift.Hashable {}
extension CrowdConnectedCore.LocationTrackingMode : Swift.RawRepresentable {}
extension CrowdConnectedCore.CrowdConnectedValidationResult : Swift.Equatable {}
extension CrowdConnectedCore.CrowdConnectedValidationResult : Swift.Hashable {}
extension CrowdConnectedCore.CrowdConnectedValidationResult : Swift.RawRepresentable {}
